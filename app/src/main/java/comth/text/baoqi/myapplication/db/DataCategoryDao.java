package comth.text.baoqi.myapplication.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DEVICE_BIND_BEAN".
 */
public class DataCategoryDao extends AbstractDao<MyDBData, Long> {

    public static final String TABLENAME = "MY_DB_DATA";

    /**
     * Properties of entity ProductCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Tid = new Property(0, Long.class, "tid", true, "TID");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Obj = new Property(4, String.class, "obj", false, "OBJ");
    }

    public DataCategoryDao(DaoConfig config) {
        super(config);
    }

    public DataCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_DB_DATA\" (" + //
                "\"TID\" INTEGER PRIMARY KEY," + // 1: logo
                "\"TIME\" TEXT," + // 1: type_desc
                "\"TYPE\" TEXT," + // 0: tid
                "\"Text\" TEXT," + // 0: tid
                "\"Obj\" TEXT );"); // 2: type_name
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_DB_DATA\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyDBData entity) {
        stmt.clearBindings();

        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(1, tid);
        }

        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }

        String obj = entity.getObj();
        if (obj != null) {
            stmt.bindString(5, obj);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MyDBData readEntity(Cursor cursor, int offset) {
        MyDBData entity = new MyDBData(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // logo
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logo
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logo
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logo
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // tid
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MyDBData entity, int offset) {
        entity.setTid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setObj(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MyDBData entity, long rowId) {
        entity.setTid(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MyDBData entity) {
        if (entity != null) {
            return entity.getTid();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
